const mongoose = require('mongoose');

const chatSchema = new mongoose.Schema({
    userId: { 
        type: String, 
        required: true,
        index: true
    },
    role: {
        type: String,
        required: true,
        enum: ['system', 'user', 'assistant']
    },
    content: {
        type: String,
        required: true
    },
    timestamp: { 
        type: Date, 
        default: Date.now,
        index: true
    }
});

const activeUserSchema = new mongoose.Schema({
    userId: { 
        type: String, 
        required: true, 
        unique: true 
    },
    displayName: {  // üîπ ƒê·∫£m b·∫£o d√πng `displayName` ƒë√∫ng v·ªõi schema
        type: String, 
        required: true 
    },
    channelID: {
        type: String,
        required: true
      
    },
    timestamp: { 
        type: Date, 
        default: Date.now 
    }
});

const Chat = mongoose.model('Chat', chatSchema);
const ActiveUser = mongoose.model('ActiveUser', activeUserSchema);

async function connectDB() {
    try {
        await mongoose.connect(process.env.MONGODB_URI, {
            serverSelectionTimeoutMS: 5000
        });
        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB!");
    } catch (error) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", error.message);
        process.exit(1);
    }
}

// üîπ Th√™m user v√†o danh s√°ch ƒëang chat
async function addActiveUser(userId, displayName, channelId) {
    if (!channelId) {
        console.error(`‚ùå L·ªói: channelId kh√¥ng t·ªìn t·∫°i khi th√™m user ${userId}`);
        return;
    }
    try {
        console.log(`üìå DEBUG: L∆∞u user ${userId} v√†o activeUsers v·ªõi channelId ${channelId}`);
        await ActiveUser.findOneAndUpdate(
            { userId },
            { displayName, channelID: channelId, timestamp: new Date() },
            { upsert: true, new: true }
        );
        console.log(`‚úÖ addActiveUser: ƒê√£ l∆∞u th√†nh c√¥ng user ${userId}`);
    } catch (error) {
        console.error("üì¶ L·ªói khi th√™m user v√†o danh s√°ch chat:", error.message);
    }
}



// üîπ X√≥a user kh·ªèi danh s√°ch ƒëang chat (FIX L·ªñI)
async function removeActiveUser(userId) {
    try {
        await ActiveUser.deleteOne({ userId }); // ‚úÖ Ch·ªâ c·∫ßn userId
    } catch (error) {
        console.error("üì¶ L·ªói x√≥a user kh·ªèi danh s√°ch chat:", error.message);
    }
}

// üîπ Ki·ªÉm tra user c√≥ trong danh s√°ch kh√¥ng
async function isActiveUser(userId) {
    return !!(await ActiveUser.findOne({ userId }));
}

// üîπ L·∫•y danh s√°ch t·∫•t c·∫£ user ƒëang chat
async function getActiveUsers() {
    try {
        return await ActiveUser.find().lean();
    } catch (error) {
        console.error("üì¶ L·ªói l·∫•y danh s√°ch user ƒëang chat:", error.message);
        return [];
    }
}

// üîπ L∆∞u l·ªãch s·ª≠ chat
async function saveChatHistory(userId, role, content) {
    try {
        await Chat.create({ userId, role, content });
    } catch (error) {
        console.error("üì¶ L·ªói l∆∞u d·ªØ li·ªáu:", error.message);
    }
}

// üîπ L·∫•y l·ªãch s·ª≠ chat (T·ªêI ∆ØU)
async function getChatHistory(userId, limit = 10) {
    try {
        return await Chat.find({ userId })
            .sort({ timestamp: 1 }) // ‚úÖ Sort tƒÉng d·∫ßn (kh√¥ng c·∫ßn reverse)
            .limit(limit)
            .lean()
            .then(chats => chats.map(({ role, content }) => ({ role, content })));
    } catch (error) {
        console.error("üì¶ L·ªói ƒë·ªçc d·ªØ li·ªáu:", error.message);
        return [];
    }
}

// Th√™m h√†m ph√¢n t√≠ch l·ªãch s·ª≠ ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng
async function getUserProfile(userId) {
    try {
        const history = await getChatHistory(userId, 100); // L·∫•y 100 tin nh·∫Øn g·∫ßn nh·∫•t
        const profile = {
            frequentlyUsedWords: [],
            commonTopics: [],
            preferences: []
        };

        // Ph√¢n t√≠ch l·ªãch s·ª≠ ƒë·ªÉ x√¢y d·ª±ng profile
        history.forEach(({ role, content }) => {
            if (role === 'user') {
                // V√≠ d·ª•: Ph√°t hi·ªán t·ª´ kh√≥a th∆∞·ªùng d√πng
                const words = content.toLowerCase().split(/\s+/);
                profile.frequentlyUsedWords.push(...words);
                
                // Ph√°t hi·ªán ch·ªß ƒë·ªÅ (v√≠ d·ª•: game, √¢m nh·∫°c)
                if (content.includes('game')) profile.commonTopics.push('game');
                if (content.includes('nh·∫°c')) profile.commonTopics.push('√¢m nh·∫°c');
                if (content.includes('AI')) profile.commonTopics.push('AI');
                if (content.includes('tool')) profile.commonTopics.push('tool');
                if (content.includes('formula, c√¥ng th·ª©c')) profile.commonTopics.push('c√¥ng th·ª©c');
                if (content.includes('to√°n')) profile.commonTopics.push('√¢m nh·∫°c');
                if (content.includes('l·ªãch s·ª≠')) profile.commonTopics.push('nƒÉm, year');
                if (content.includes('data')) profile.commonTopics.push('data');
            }
        });

        // L·ªçc c√°c t·ª´/c·ª•m t·ª´ xu·∫•t hi·ªán nhi·ªÅu l·∫ßn
        profile.frequentlyUsedWords = [...new Set(profile.frequentlyUsedWords)];
        profile.commonTopics = [...new Set(profile.commonTopics)];

        return profile;
    } catch (error) {
        console.error("üì¶ L·ªói ph√¢n t√≠ch l·ªãch s·ª≠:", error.message);
        return null;
    }
}

async function getUserChannel(userId) {
    const user = await ActiveUser.findOne({ userId });
    console.log(`[DEBUG] User ${userId} c√≥ channelID trong DB: ${user?.channelID}`);
    return user ? user.channelID : null;
}

module.exports = { 
    connectDB, 
    saveChatHistory, 
    getChatHistory, 
    addActiveUser, 
    removeActiveUser, 
    isActiveUser, 
    getActiveUsers,  // ‚úÖ Xu·∫•t th√™m h√†m l·∫•y danh s√°ch user
    getUserChannel,
    getUserProfile

};
